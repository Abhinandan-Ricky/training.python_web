* extend sockets day 1 to go more in-depth on various types/families/protocols
* day 1 exercise is writing a packet-sniffer in python, then using it to look
  at network traffic.

* day two of sockets then implements simple echo server/client in TCP and a
  second one in UDP.

* day three discuss protocols, implement HTTP server using echo server base

* day four, discuss strategies for parallelism, incorporate select into the
  http server



six weeks, 24 sessions:

Week 1: Python Review/Update (including editor/environment, debugging, testing)
	1: set up,
		in class: intros, get editor, github, virtualenv and venvwrapper working
		homework: python book exercises
	2: Python Basics
		in class: everything is an object lecture, finding your way around
		homework: python book exercises
	3: Debugging
		in class: tour of pdb
		homework: python book exercises
	4: Testing
		in class: tour of unittest module, talk about test construction
		homework: python book exercises, read about nosetest and pytest
Week 2: Python Networking, low-level (sockets, protocols, communications)
	1: sockets.
		in class: lecture on socket lib, show basics 1.5h
		homework: Create an echo client/server with tests (exact buffer problem)
	2: protocols.
		in class: lecture on protocols, show basic imap/smtp interactions
			design stories for http server
		homework: Create socket HTTP server with tests
	3: concurrency.
		in class: lecture on the problem (GIL, synchronous vs async ops)
		homework: recreate the echo server using asyncchat
	4: concurrency ?? maybe deployment??
		in class: greenlets and coroutines ?? or perhaps deployment stack??
Week 3: APIs and Libraries (consuming and creating data on and off-line)
	1: Mashups and Introduction to scraping
		in class: lecture on beautiful soup
		homework: srape data from a website somewhere.
	2: Consuming APIs
		in class: lecture on SOAP/XML-RPC and REST
		homework: build code to consume data from one or more API sources
	3: CGI/WSGI
		in class: lecture on CGI and WSGI, history, structure
		homework: build a wsgi app (bookdb)
	4: Serving Data
		in class: lecture on producing REST services
		homework: build a wsgi-powered RESTful service that provides data
				  from your mashup sources.
Week 4: Networking Project...??? (build some sort of simple wsgi app)
	project ideas:
Week 5: Flask and microframeworks (dbapi2, sqlalchemy)
	1: intro to sqlalchemy
		in class: lecture on dbapi2 and orms
		homework: install postgresql and build sqlalchemy models and tests for flask microblog
	2: dispatch and views in flask
		in class: lecture on routes, views, config, and 'g'
		homework: build and test views for microblog
	3: templating in flask
		in class: lecture on Jinja2, app context
	4: Extending a flask app.
		in-class
		homework: using asyn technologies, add a 'chat room' to our flask app.
Week 6: Django and full-stack frameworks (django ORM)
	1:
	2:
	3:
	4:
Week 7: Traversal, ZODB, Pyramid
	1:
	2:
	3:
	4:
Week 8: Web Project (pick a framework and build something non-trivial)
	project ideas:

incorporate deployment strategies and ci integration along the way.





* Write a packet-sniffer in python, implement at least IP and TCP protocols,
make friendly output

http://www.binarytides.com/python-packet-sniffer-code-linux/


* https://ep2013.europython.eu/media/conference/slides/using-sockets-in-python.html


Editor Setup

    Sublime Text 2
        Installing Plugins
            Theme, Color Scheme

        Custom Snippets "pdb"-Tab for breakpoint
        PdbSublimeTextSupport for code following


http://sdiehl.github.io/gevent-tutorial/#chat-server
